{frontmatter}

-# Status of the book

Where am I with the book and what are my plans? (All is subject to change, of course.)

To actually finish something, I want to do this in the 1st edition:

* Preface (100%) - to explain why this book even exists and some background
* JPA Good Times, Bad Times
    * Good Parts (100%) FINAL
    * Missing Parts (100%) FINAL
    * Questionable Parts (100%) FINAL
    * Caching Considerations (100%) FINAL
    * Love and Hate for ORM (100%) FINAL
* Opinionated JPA
    * ORM tuned down (100%)
    * No further steps without Querydsl (100%)
    * Troubles with *to-one* relationships (100%) NEEDS REVIEW
        * https://virgo47.wordpress.com/2015/01/30/jpa-joins-without-mapped-attributes/ (JPA 2.1 supports ON, not before)
    * Removing `@ManyToOne` altogether (not JPA compliant) (100%) NEEDS REVIEW
%% Second edition:
%%    * *Many-to-many* relations mapping consequences, what SQL it generates, explicit/implicit mapping
%% also eclipselink bug with left-join + dropped ON: https://bugs.eclipse.org/bugs/show_bug.cgi?id=422510
%% Also on cascade: https://vladmihalcea.com/2015/03/05/a-beginners-guide-to-jpa-and-hibernate-cascade-types/
%% (describes cascading in general for various *To*, including dangerous REMOVE on @ManyToMany that
%% often does not do what we want (actually does more and removes not only link, but also target).
%%    * Transaction boundary and lazy load (be explicit, I cannot stress it enough), OSIV
    * Modularity, if you must (100%)
* Common Problems
%%    * Object identity, easy problem, recommended always the same way
%%        * Composite `@Id` or `@IdClass`?
%%        * Equals object or id in queries? Does it matter? Tests with popular ORMs
%%        * equals/hashCode best practices, why isAssignableFrom? can it collide in hierarchies? (should not)
%%	@Override
%%	public final int hashCode() {
%%		return Objects.hashCode(getId());
%%	}
%%
%%	@Override
%%	public final boolean equals(Object obj) {
%%		return this == obj
%%			|| obj != null && getClass().isAssignableFrom(obj.getClass())
%%			&& Objects.equals(getId(), ((BaseObject<?>) obj).getId());
%%	}
%% TODO: Can I load detached entity without projection? Is this true? http://stackoverflow.com/a/15632564/658826
    * Pagination with *to-many* (100%)
    * Mapping enums (100%)
%%    * Injecting EMF for better control (integration/standalone scenarios, not typical for webapps/simple services)
%%        * Always try to keep create/close in one try/finally block
%%        * Multiple transactions ("system/infrastructure" around business)
%%    * Embeddable limitations (0%)
    * Advanced Querydsl (100%)
* Appendices
    * H2 Database (100%)
    * Bugs I experienced myself (100%)
    * How to report JPA provider bugs? (be active, report, vote, creating test cases, ...)

%%    * Groovy scrips for database initialization

Other ideas, maybe for next editions:

* filtering/pagination (promised for 2nd ed)                                         
You may be interested in presented filtering/pagination "framework" too and while it is utilized
with the JPA back-end in our case, the concept is rather generic. Sometimes I feel like reinventing
this part for every project I've made.
* DAO vs Repository vs...?
* http://stackoverflow.com/questions/23625885/does-querydsl-suffers-of-the-same-limitations-as-jpa-criteria-api
`JPASQLQuery`? How does it use JPA mapping?