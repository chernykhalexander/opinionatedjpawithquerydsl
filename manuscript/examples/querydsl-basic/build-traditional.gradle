/*
 * Alternative (probably more traditional) build with separate "generated" source set
 * and resources in separate directory (as by default).
 *
 * Currently this build nearly passes, but the test fails because persistence.xml does not
 * enumerate entity classes for Hibernate (this is not necessary for Maven build or for
 * build.gradle build file).
 */
plugins {
  id 'nebula.provided-base' version '3.0.3'
  id 'java'
}

repositories {
  jcenter()
}

configurations {
  querydslApt
  jpaMetamodelApt
}

sourceCompatibility = 1.8
targetCompatibility = 1.8


ext {
  querydslVersion = '4.1.4'
  hibernateVersion = '5.2.2.Final'
  eclipseLinkVersion = '2.6.2'
  h2Version = '1.4.190'
  testNgVersion = '6.11'
}

dependencies {
  provided 'javax:javaee-api:7.0'
  compile "com.querydsl:querydsl-jpa:$querydslVersion"
  compile "org.hibernate:hibernate-entitymanager:$hibernateVersion"
  compile "org.eclipse.persistence:org.eclipse.persistence.jpa:$eclipseLinkVersion"
  compile "com.h2database:h2:$h2Version"

  testCompile "org.testng:testng:$testNgVersion"

  querydslApt "com.querydsl:querydsl-apt:$querydslVersion"
  jpaMetamodelApt "org.eclipse.persistence:org.eclipse.persistence.jpa.modelgen.processor:$eclipseLinkVersion"
}

sourceSets {
  generated {
    java {
      srcDirs = ["$buildDir/generated-src"]
    }
  }
  test {
    // This is required for tests to "see" generated classes as well
    runtimeClasspath += generated.output
  }
}

task generateQuerydsl(type: JavaCompile, group: 'build', description: 'Generates the QueryDSL query types') {
  source = sourceSets.main.java
  classpath = configurations.compile + configurations.querydslApt
  options.compilerArgs = [
    '-proc:only',
    '-processor', 'com.querydsl.apt.jpa.JPAAnnotationProcessor'
  ]
  destinationDir = sourceSets.generated.java.srcDirs.iterator().next()
}

task generateJpaMetamodel(type: JavaCompile, group: 'build', description: 'Generates metamodel for JPA Criteria (not QueryDSL)') {
  source = sourceSets.main.java
  classpath = configurations.compile + configurations.jpaMetamodelApt
  options.compilerArgs = [
    '-proc:only',
    '-processor', 'org.eclipse.persistence.internal.jpa.modelgen.CanonicalModelProcessor',
    '-Aeclipselink.persistencexml=src/main/resources/META-INF/persistence.xml',
    '-Aeclipselink.persistenceunits=demo-el'
  ]
  destinationDir = sourceSets.generated.java.srcDirs.iterator().next()
}

compileJava {
  dependsOn generateQuerydsl
  dependsOn generateJpaMetamodel
  source generateQuerydsl.destinationDir
  source generateJpaMetamodel.destinationDir
}

compileGeneratedJava {
  dependsOn generateQuerydsl
  dependsOn generateJpaMetamodel
  options.warnings = false
  classpath += sourceSets.main.runtimeClasspath
}

test {
  useTestNG()
}