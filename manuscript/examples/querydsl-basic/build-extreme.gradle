/*
 * This build tries to streamline things as much as possible by declaring the generated classes
 * directory as part of the main classes - no new source set is created and in overall it requires
 * less handling afterwards. In addition to that the build redirects main/resources to main/classes
 * (just like the primary build.gradle) for Hibernate auto-scan.
 *
 * This build however suffers a performance problem - it repeats generateQuerydsl and
 * generateJpaMetamodel every time (does not know they are up to date probably because they
 * are not separate stages).
 */
plugins {
  id 'java'
}

repositories {
  jcenter()
}

configurations {
  querydslApt
  jpaMetamodelApt
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

tasks.withType(JavaCompile) {
  options.encoding = 'UTF-8'
}

ext {
  generatedSrc = "$buildDir/generated-src"

  querydslVersion = '4.1.4'
  hibernateVersion = '5.2.2.Final'
  eclipseLinkVersion = '2.6.2'
  h2Version = '1.4.190'
  testNgVersion = '6.11'
}

dependencies {
  compileOnly 'javax:javaee-api:7.0'
  compile "com.querydsl:querydsl-jpa:$querydslVersion"
  compile "org.hibernate:hibernate-entitymanager:$hibernateVersion"
  compile "org.eclipse.persistence:org.eclipse.persistence.jpa:$eclipseLinkVersion"
  compile "com.h2database:h2:$h2Version"

  testCompile "org.testng:testng:$testNgVersion"

  querydslApt "com.querydsl:querydsl-apt:$querydslVersion"
  jpaMetamodelApt "org.eclipse.persistence:org.eclipse.persistence.jpa.modelgen.processor:$eclipseLinkVersion"
}

sourceSets {
  main {
    java.srcDir file(generatedSrc)
    output.resourcesDir = "$buildDir/classes/java/main"
  }
  // no special additions to test configuration is necessary, as everything is in main classes now
}

task generateQuerydsl(type: JavaCompile, group: 'build', description: 'Generates the QueryDSL query types') {
  source = sourceSets.main.java
  classpath = configurations.compile + configurations.querydslApt
  options.compilerArgs = [
    '-proc:only',
    '-processor', 'com.querydsl.apt.jpa.JPAAnnotationProcessor'
  ]
  destinationDir = file(generatedSrc)
}

task generateJpaMetamodel(type: JavaCompile, group: 'build', description: 'Generates metamodel for JPA Criteria (not QueryDSL)') {
  source = sourceSets.main.java
  classpath = configurations.compile + configurations.jpaMetamodelApt
  options.compilerArgs = [
    '-proc:only',
    '-processor', 'org.eclipse.persistence.internal.jpa.modelgen.CanonicalModelProcessor',
    '-Aeclipselink.persistencexml=src/main/resources/META-INF/persistence.xml',
    '-Aeclipselink.persistenceunits=demo-el'
  ]
  destinationDir = file(generatedSrc)
}

compileJava {
  dependsOn generateQuerydsl
  dependsOn generateJpaMetamodel
}

test {
  useTestNG()
}