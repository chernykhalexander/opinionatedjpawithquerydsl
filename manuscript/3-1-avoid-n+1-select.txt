# Avoid N+1 select {#ch-avoid-n-plus-1}

While performance tuning is not the main goal of this book we should follow some elementary
performance common sense. If we can avoid an unnecessary query we should do so. With ORM/JPA
we can generate a lot of needless queries without even realizing. In this chapter we will cover
the most pronounced problem called *N+1 select*.

{icon=book}
G> ### SQL Performance Explained
G>
G> I can highly recommend this incredible book [[SQLPE](#bib-sqlpe)] which explains indexes,
G> joins, execution plans and many other aspects of queries (including data modification) in just
G> under 200 pages. This not only is a true gem in this area, it can be also obtained as PDF from
G> [its site](http://sql-performance-explained.com) for 10 Eur or so. It mentions N+1 problem
G> as well.


## Anatomy of N+1 select

I'd prefer to call this problem 1+N because it mostly starts with one query that returns N rows
and induces up to N additional queries. While addition is commutative, hence 1+N is the same like
N+1, I'll stick to *N+1* as usually used in literature. The typical scenarios when the N+1 problem
appears are:

* Query for N entities that have eager *to-one* relationship -- or more of them -- and the provider
is not smart enough to use joins.
* Query for N entities that have eager *to-many* relationship and the provider is either not smart
enough to use the join (again) or it is not possible to use it for other reasons like pagination.
We will cover paginating of entities with *to-many* [later in this chapter](#to-many-paginating).
* Query for N entities with lazy relationship that is triggered later, e.g. in the view as
usual with the Open Session in View (OSIV) pattern.

There are probably more scenarios, but these are the most typical ones. First let's look at the
eager examples.


## Eager *to-one* without joins

If you recall our [simple example with `@ManyToOne`](#many-to-one-simple-example) from the chapter
[Troubles with *to-one* relationships](#ch-to-one-troubles) you know that *to-one* relationships
may trigger additional fetching. These may result in DB queries or they can be found in the
cache -- depends on your setting -- and this all must be taken into consideration.

For the next sections let's use the following data for dogs and their owners:

{title="Content of **Owner** table", width="narrow"}
| id | name |
|----|------|
| 1 | Adam |
| 2 | Charlie |
| 3 | Joe |
| 4 | Mike |

{title="Content of **Dog** table", width="narrow"}
| id | name | owner_id |
|----|------|-----|----------|
| 1 | Alan | 1 (Adam) |
| 2 | Beastie | 1 (Adam) |
| 3 | Cessna | 1 (Adam) |
| 4 | Rex | 3 (Joe) |
| 5 | Lassie | 3 (Joe) |
| 6 | Dunco | 4 (Mike) |
| 7 | Goro | `NULL` |

Our mapping for the `Dog` looks like this:

~~~
@Entity
public class Dog {

  @Id
  @GeneratedValue(strategy = GenerationType.IDENTITY)
  private Integer id;

  private String name;

  @ManyToOne(fetch = FetchType.EAGER)
  @JoinColumn(name = "owner_id")
  private Owner owner;
~~~

And for the `Owner`:

~~~
@Entity
public class Owner implements Serializable {

  @Id
  @GeneratedValue(strategy = GenerationType.IDENTITY)
  private Integer id;

  private String name;

  @OneToMany(mappedBy = "owner")
  private Set<Dog> dogs;
~~~

Now let's list all the dogs with this code:

~~~
List<Dog> dogs = new JPAQuery<>(em)
  .select(QDog.dog)
  .from(QDog.dog)
  .fetch();
~~~

We get seven dogs for three different owners (one dog is not owned) but what happened on the SQL
level? Both Hibernate and EclipseLink do something like this (output from EclipseLink):

{lang=sql}
~~~
SELECT ID, NAME, OWNER_ID FROM DOG
SELECT ID, NAME FROM OWNER WHERE (ID = 1)
SELECT ID, NAME FROM OWNER WHERE (ID = 3)
SELECT ID, NAME FROM OWNER WHERE (ID = 4)
~~~

That classifies as N+1 problem, although the N may be lower than the count of
selected rows thanks to the persistence context. JPA providers may be persuaded to use `JOIN`
to fetch the information but this is beyond the current version of JPA specification. EclipseLink
offers `@JoinFetch(JoinFetchType.OUTER)` and Hibernate has `@Fetch(FetchMode.JOIN)` (also uses
outer select). In a related [demo](https://github.com/virgo47/opinionatedjpawithquerydsl/blob/master/manuscript/examples/n-plus-one-problem/src/test/java/tests/ManyToOneEagerNPlusOneProblem.java)
I tried both and to my surprise EclipseLink obeyed but Hibernate did not -- which went against my
previous experiences that Hibernate tries to optimize queries better in general.

Now, what if we don't need any data for owner? You may try to use lazy fetch for the data you
don't need *if you know you can rely on `LAZY`* or try some other technique described in
[Troubles with *to-one* relationships](#ch-to-one-troubles). Here *entity views* come to mind, but
projections may be even better.

Anytime I wanted to load dogs with their owners I'd go for explicit `JOIN`. Let's see how to
do that properly. Even though we don't use the owners in select it is not sufficient construct
query like this:

~~~
List<Dog> dogs = new JPAQuery<>(em)
  .select(QDog.dog)
  .from(QDog.dog)
  .leftJoin(QDog.dog.owner)
  .fetch();
~~~

This results in an invalid JPQL query:

{lang=sql}
~~~
select dog
from Dog dog
  left join dog.owner
~~~

While this runs on Hibernate, it fails on EclipseLink with a syntax error: *An identification
variable must be defined for a JOIN expression.* This, indeed, is necessary according to the
specification and we must add an alias like so:

~~~
List<Dog> dogs = new JPAQuery<>(em)
  .select(QDog.dog)
  .from(QDog.dog)
  .leftJoin(QDog.dog.owner, QOwner.owner)
  .fetch();
~~~

This results in a valid JPQL query:

{lang=sql}
~~~
select dog
from Dog dog
  left join dog.owner as owner
~~~

But without using it in `select` -- which we don't want because we don't want the list of
`Tuple`s -- we end up with a query with our join, but the data for owners is still not fetched
and N additional queries are executed just like before. Had we used it in the select it would be
fetched, of course.

The right way to do it if we insist on the result typed as `List<Dog>` is this:

~~~
List<Dog> dogs = new JPAQuery<>(em)
  .select(QDog.dog)
  .from(QDog.dog)
  .leftJoin(QDog.dog.owner).fetchJoin()
  .fetch();
~~~

This results in a valid and correct JPQL query:

{lang=sql}
~~~
select dog
from Dog dog
  left join fetch dog.owner
~~~

Notice we haven't used alias this time and looking at BNF
([Backusâ€“Naur form](https://en.wikipedia.org/wiki/Backus%E2%80%93Naur_form)) notation from
[[JPspec](#bib-jpspec)], section *4.4.5 Joins* I believe `identification_variable` is allowed
only for `join` and not for `fetch_join` rules. Nonetheless, both Hibernate and EclipseLink
tolerate this.

W> Note that the `JOIN` query doesn't take the advantage of any results in entity cache because
W> now you
W> don't access them by ID. But at least we say exactly what we want. We still have to mind any
W> "downstream" *to-one* relationships on the joined entity. For the most precise and efficient
W> results I can, again, only recommend using projections, albeit being least ORM-ish. This means
W> using the data you need in the `SELECT` clause and skipping `FETCH` clauses in the resulting
W> JPQL.


## Eager *to-many* relationships

Using `EAGER` on collections by default is rather risky. I'd personally not use it and use explicit
joins when needed instead. In our [example](https://github.com/virgo47/opinionatedjpawithquerydsl/blob/master/manuscript/examples/n-plus-one-problem/src/test/java/tests/OneToManyEagerNPlusOneProblem.java)
we will use `OwnerEager` entity that uses the same table like `Owner` (hence the same prepared
data) but maps `dogs` collection as:

~~~
@OneToMany(mappedBy = "owner", fetch = FetchType.EAGER)
private Set<DogEager> dogs;
~~~

Now we run the following code:

~~~
List<OwnerEager> owners = new JPAQuery<>(em)
  .select(QOwnerEager.ownerEager)
  .from(QOwnerEager.ownerEager)
  .fetch();
System.out.println("\nowners = " + owners);
for (OwnerEager owner : owners) {
  System.out.println(owner.getName() + "'s dogs = " + owner.getDogs());
}
~~~

SQL produced at the point `fetch()` is executed is (output from EclipseLink, Hibernate is similar):

{lang=sql}
~~~
SELECT ID, NAME FROM Owner
SELECT ID, NAME, owner_id FROM Dog WHERE (owner_id = ?)
SELECT ID, NAME, owner_id FROM Dog WHERE (owner_id = ?)
SELECT ID, NAME, owner_id FROM Dog WHERE (owner_id = ?)
SELECT ID, NAME, owner_id FROM Dog WHERE (owner_id = ?)
~~~

And output of the subsequent print statements (manually wrapped):

{lang=text}
~~~
owners = [Person{id=1, name=Adam}, Person{id=2, name=Charlie},
 Person{id=3, name=Joe}, Person{id=4, name=Mike}]
Adam's dogs = [Dog{id=1, name='Alan', owner.id=1}, Dog{id=2,
 name='Beastie', owner.id=1}, Dog{id=3, name='Cessna', owner.id=1}]
Charlie's dogs = []
Joe's dogs = [Dog{id=4, name='Rex', owner.id=3},
 Dog{id=5, name='Lassie', owner.id=3}]
Mike's dogs = [Dog{id=6, name='Dunco', owner.id=4}]
~~~

Everything is OK, except it can all be done in a single query. Had we added a single fetch join
line in the query we would have had it in a single go:

~~~
List<OwnerEager> owners = new JPAQuery<>(em)
  .select(QOwnerEager.ownerEager)
  .from(QOwnerEager.ownerEager)
  .leftJoin(QOwnerEager.ownerEager.dogs).fetchJoin()
  .fetch();
~~~

Join reaches for the data -- notice we have to use `leftJoin` if the collection may be empty -- and
`fetchJoin` takes care of putting them in the collection. This is probably the best what we can
explicitly do with eager collection mapping in place. Resulting SQL (here EclipseLink):

{lang=sql}
~~~
SELECT t1.ID, t1.NAME, t0.ID, t0.NAME, t0.owner_id
 FROM {oj Owner t1 LEFT OUTER JOIN Dog t0 ON (t0.owner_id = t1.ID)}
~~~

W> Problem with joins across *to-many* relationship is that they change the "shape" of the
W> resulting relation (or "table" if you will) in *both* directions and many lines of the driving
W> table (owners in our examples) can be repeated. This makes simple pagination with `LIMIT` and
W> `OFFSET` clauses impossible.
W>
W> From the correctness point this is not a problem for non-join query that first paginates on
W> owners properly and then loads the dogs for N owners on the page. But this still is a
W> performance problem and we will tackle it in the section [Paginating with
W> *to-many*](#to-many-paginating) lower.

In general, if eager fetch on collection is not executed using a join on the background it is not
worth it. We can get the same N+1 behavior with lazy loads although it may require some explicit
code to actually fetch the collection when you want -- e.g. in the service layer instead of later
in presentation layer with persistence context already not available.

There is one crucial difference between N+1 across *to-one* and *to-many* relationships. In case
of *to-one* JPA provider may utilize entity cache as the ID of the needed entity is already
available. In case of *to-many*, on the other hand, we have to execute actual select. This may
use query cache -- but setting that one appropriately is definitely more tricky than the entity
cache. Without caches this difference is blurred away and the only difference is that for *to-one*
we're accessing rows in DB by its primary key, while for *to-many* we're using the foreign key. PK
is virtually always indexed, FK not necessarily so -- but I guess it should be when we're using
this access pattern.

Perhaps there are some settings or custom annotations that make JPA provider perform the join, but
it must be smart enough not to use it when limit/offset is in play. As this capability is not
available in JPA -- and because I believe eager collections are even worse than eager to-one --
we will not delve into it any more.


## Lazy relationships triggered later

Lazy fetch is a reasonable default for mapping collections -- and it is default according to the
specification. Because a collection can be implemented in a custom way all JPA providers offer lazy
behaviour without the need for any bytecode magic.

Mapping on the `Owner` is natural:

~~~
@OneToMany(mappedBy = "owner")
private Set<Dog> dogs;
~~~

Now we run the code very similar to the previous section (entity classes are different, but
they work on the same tables):

~~~
List<Owner> owners = new JPAQuery<>(em)
  .select(QOwner.owner)
  .from(QOwner.owner)
  .fetch();
System.out.println("\nowners = " + owners);
for (Owner owner : owners) {
  System.out.println(owner.getName() + "'s dogs = " + owner.getDogs());
}
~~~

EclipseLink produces the following output (mixing SQL and standard output):

{lang=text}
~~~
SELECT ID, NAME FROM OWNER
owners = [Person{id=1, name=Adam}, Person{id=2, name=Charlie},
 Person{id=3, name=Joe}, Person{id=4, name=Mike}]
Adam's dogs = {IndirectSet: not instantiated}
Charlie's dogs = {IndirectSet: not instantiated}
Joe's dogs = {IndirectSet: not instantiated}
Mike's dogs = {IndirectSet: not instantiated}
~~~

Is that all? This may seem a bit disturbing and leads us to the question: What should `toString`
on the lazy collection do?

I> EclipseLink does not load lazy collections when `toString()` is called. Is it a "business"
I> method or not? We're used to the `toString` output as defined in `AbstractCollection`, but `Set`
I> does not imply any particular format. So we have to call something "real" on the collection.
I> Even `isEmpty()` or `size()` without using the result would be sufficient to load the collection.

Hibernate treats `toString` differently and prints the content as expected:

{lang=text}
~~~
Hibernate: select owner0_.id as id1_1_, owner0_.name as name2_1_
 from Owner owner0_
owners = [Person{id=1, name=Adam}, Person{id=2, name=Charlie},
 Person{id=3, name=Joe}, Person{id=4, name=Mike}]
Hibernate: select dogs0_.owner_id as owner_id3_0_0_,
  dogs0_.id as id1_0_0_, ...
 from Dog dogs0_ where dogs0_.owner_id=?
Adam's dogs = [Dog{id=1, name='Alan', owner.id=1}, Dog{id=2,
 name='Beastie', owner.id=1}, Dog{id=3, name='Cessna', owner.id=1}]
...and more for other owners
~~~

This `toString` triggers the lazy load process, just like other methods that do the same for
EclipseLink. This means N+1 problem, of course. Lazy load is supposed to prevent loading the data
that is not needed -- sometimes we say that the best queries are the ones we don't have to perform.
But what if want to display a table of owners and list of their dogs in each row? Postponing the
load into the view is the worst thing we can do for couple of reasons:

* We actually don't gain anything, we're still stuck with N+1 problem while there are better ways
to load the same data.
* We know what data are needed and the responsibility for their loading is split between backend
layer and presentation layer.
* To allow presentation layer to load the data we need to keep persistence context open longer.
This leads to the infamous [Open Session in View](http://stackoverflow.com/tags/open-session-in-view/info)
(OSIV) pattern, or rather an antipattern.

W> Using OSIV may lead to situations that for some simple cases the changes are needed only at the
W> presentation layer. While this may sound appealing it is, in fact, rather appalling. Not only we
W> need more queries and your site may not scale well, especially for pages with more items per
W> page. It also opens holes in the contract between the persistence and service layer, leading to
W> all kinds of mysterious bugs, e.g. unexpected updates of objects for which no actual code for
W> update exists.
W>
W> This is the price for pulling attached entity objects up to the presentation layer. This is not
W> about utilizing lazy load to avoid some queries anymore -- this is the consequence of being lazy
W> when designing the system. This kind of laziness is not pushing the progress forward. (And yes,
W> I've been there and I've sinned too.)

When we need the data in the collection we should use join just like we used it for an eager
collection -- there is actually no difference if we use the join explicitly. But as we demonstrated
previously there is the issue with paginating. And that's what we're going to talk about next.


## Paginating with *to-many* {#to-many-paginating}

I mentioned previously that we [can't escape SQL](#cant-escape-sql) underneath. If we join another
table across *to-many* relationship we change the number of fetched rows and with that we cannot
paginate reliably. We can demonstrate this with SQL or even with Querydsl (that is JPQL).

We will try to obtain owners and their dogs ordered by owner's name. We will set `offset` to 1 and
`limit` to 2 which should return Charlie and Joe. I realize that offset that is not multiple of
limit (that is a page size) does not make best sense, but I want these two particular items for
the following reasons:

* I want to draw from the middle of our owner list, not the beginning or the end.
* I want to see the effect of Charlie's empty collection.
* I want to see how Joe's two dogs affect the results.

With our limited data this `limit` (2) and `offset` (1) demonstrates all that.

We already saw that both eager and lazy collection allows us to query the master table and let
N other queries pull the data:

~~~
List<Owner> owners = new JPAQuery<>(em)
  .select(QOwner.owner)
  .from(QOwner.owner)
  .orderBy(QOwner.owner.name.asc())
  .offset(1)
  .limit(2)
  .fetch();
for (Owner owner : owners) {
  owner.getDogs().isEmpty(); // to assure lazy load even on EclipseLink
  System.out.println(owner.getName() + "'s dogs = " + owner.getDogs());
}
~~~

T> Notice the `orderBy` method added to the query -- pagination without order does not make any
T> sense. Even if it seems to work in some "natural" order it is not guaranteed to do so in the
T> future. Never forget to add order to the results that are paginated, even if it's order by some
T> technical column like primary key, although columns with business meaning are better for order.


### Join leads to incorrect results

We can't fix the N+1 problem with `JOIN FETCH` anymore:

~~~
List<Owner> owners = new JPAQuery<>(em)
  .select(QOwner.owner)
  .from(QOwner.owner)
  .leftJoin(QOwner.owner.dogs).fetchJoin()
  .orderBy(o.name.asc(), d.name.asc())
  .offset(1)
  .limit(2)
  .fetch();
~~~

With the same print loop this produces:

{lang=text}
~~~
Adam's dogs = {[Dog{id=1, name='Alan', owner.id=1}, Dog{id=2, ...
Adam's dogs = {[Dog{id=1, name='Alan', owner.id=1}, Dog{id=2, ...
~~~

The same happens if we want to be explicit. Here we even use "raw" versions of entities, ad-hoc
join (to root entity) and explicit `ON`:

~~~
QOwnerRaw o = QOwnerRaw.ownerRaw;
QDogRaw d = QDogRaw.dogRaw;
List<Tuple> results = new JPAQuery<>(em)
  .select(o, d)
  .from(o)
  .leftJoin(d).on(d.ownerId.eq(o.id))
  .orderBy(o.name.asc(), d.name.asc())
  .offset(1)
  .limit(2)
  .fetch();
for (Tuple row : results) {
  DogRaw dog = row.get(d);
  System.out.println(row.get(o).getName() + ", " + (dog != null ? dog.getName() : null));
}
~~~

Now we had to change the print loop and we put the results into tuple:

{lang=text}
~~~
Adam, Beastie
Adam, Cessna
~~~

We could just `select(o)` but it would still two rows of Adam. Ok, how does the whole result set
looks like and what are we selecting with our limit/offset?

| owner | dog |
|-------|-----|
| Adam | Alan |
| **Adam** | **Beastie** |
| **Adam** | **Cessna** |
| Charlie | null |
| Joe | Lassie |
| Joe | Rex |
| Mike | Dunco |

This makes it more obvious. Offset and limit are not smart and they don't care about what we want
to paginate. With values 1 and 2 respectively they will give us lines 2 and 3 of whatever result we
apply it to. And that is very important.


### Using native SQL

Is it even possible to paginate with a single query? Yes, but we have to use subquery in a `FROM`
or `JOIN` clause, neither of which is available in JPQL (as of *JPA 2.1*). We can try native query:

~~~
// select * would be enough for EclipseLink
// Hibernate would complains about duplicated sql alias
Query nativeQuery = em.createNativeQuery(
  "SELECT o.name AS oname, d.name AS dname" +
    " FROM (SELECT * FROM owner LIMIT 2 OFFSET 1) o" +
    " LEFT JOIN dog d ON o.id=d.owner_id");
List<Object[]> resultList = nativeQuery.getResultList();

System.out.println("resultList = " + resultList.stream()
  .map(row -> Arrays.toString(row))
  .collect(Collectors.toList()));
~~~

I> For EclipseLink `SELECT *` would be enough but Hibernate complains about duplicated sql alias
I> as columns `ID` and `NAME` are named the same in both tables. Even `AS` parts are required by
I> Hibernate.

Returned `resultList` has three rows:

{lang=text}
~~~
resultList = [[Charlie, null], [Joe, Rex], [Joe, Lassie]]
~~~

But all rows are related to our two selected owners. We got all the data in relational form,
there is no other way, it's up to us to group the data as we need. For this we may want to add
a transient `dogs` collection in our "raw" variant of the `Owner` class.


### JPA/Querydsl solutions

Because of current JPQL disabilities we cannot do it all in one go, but we can do it in a single
additional query:

1) Query with pagination is executed. This may return some data from the master table or perhaps
only IDs of the rows. Order must be applied for pagination to work correctly. Any where conditions
are applied here as well, more about it in a moment.
2) Fetch the missing data limiting the results to the scope of the previous result. The concrete
implementation of this step differs depending on the nature of the first query.

Let's say the first query just returns IDs like this:

~~~
QOwnerRaw o = QOwnerRaw.ownerRaw;
List<Integer> ownerIds = new JPAQuery<>(em)
  .select(o.id)
  .from(o)
  .orderBy(o.name.asc())
  // WHERE ad lib here
  .offset(1)
  .limit(2)
  .fetch();
~~~

In this case we can get the final result like this:

~~~
QDogRaw d = QDogRaw.dogRaw;
Map<OwnerRaw, List<DogRaw>> ownerDogs = new JPAQuery<>(em)
  .select(o, d)
  .from(o)
  .leftJoin(d).on(d.ownerId.eq(o.id))
  .where(o.id.in(ownerIds))
  .orderBy(o.name.asc()) // use the same order as in select #1
  .orderBy(d.name.desc()) // dogs in each list ordered DESC
  // no limit/offset, where took care of it
  .transform(groupBy(o).as(list(d)));
System.out.println("ownerDogs = " + ownerDogs);
~~~

Using the same order like in the first query is essential, additional order are allowed. Important
question is whether you need to join any *to-many* relationship for the first query as well. If we
need to (e.g. for `WHERE` conditions) we have to use `DISTINCT` which means we also have to bring
expression from `ORDER BY` into the `SELECT` clause. This is mandated by SQL, because `DISTINCT`
must be applied before we can order the results. This complicates the first select:

~~~
List<Integer> ownerIds = new JPAQuery<>(em)
  // If distinct is used SQL requires o.name here because it is used to
  // order which happens after distinct. EclipseLink can handle this,
  // Hibernate generated SQL fails. JPA spec is not specific on this.
  .select(o.id, o.name)
  // or perhaps just use o, that encompasses o.name
  // .select(o)
  .distinct() // needed if join across to-many is used to allow WHERE
  .from(o)
  .orderBy(o.name.asc())
  // WHERE ad lib here
  .offset(1)
  .limit(2)
  .fetch()
  .stream()
  .map(t -> t.get(o.id))
  // .map(Owner::getId) // if .select(o) was used
  .collect(Collectors.toList());
~~~

We could stop at `fetch` and deal with the `List<Tuple>` but that's not what we wanted hence the
additional mapping to the list of IDs. The commented version using just `o` alias and more
straightforward mapping to ID is probably better, but it still raises the question: Do we really
need to join across *to-many* to add where conditions? Can't we work around it with subquery? For
example, to get owners with some dogs we can do this with join across *to-many*:

~~~
QOwnerRaw o = QOwnerRaw.ownerRaw;
QDogRaw d = QDogRaw.dogRaw;
List<OwnerRaw> owners = new JPAQuery<>(em)
  .select(o)
  .distinct()
  .from(o)
  .leftJoin(d).on(d.ownerId.eq(o.id))
  .where(d.isNotNull())
  .orderBy(o.name.asc())
  .offset(1)
  .limit(2)
  .fetch();
~~~

This skips Charlie and returns Joe and Mike. We can get the same without `JOIN` and `DISTINCT`:

~~~
QOwnerRaw o = QOwnerRaw.ownerRaw;
QDogRaw d = QDogRaw.dogRaw;
List<OwnerRaw> owners = new JPAQuery<>(em)
  .select(o)
  .from(o)
  .where(new JPAQuery<>()
    .select(d)
    .from(d)
    .where(d.ownerId.eq(o.id))
    .exists())
  .orderBy(o.name.asc())
  .offset(1)
  .limit(2)
  .fetch();
~~~

Subquery reads a bit longer but if we wanted to select `o.id` directly it would save a lot of
troubles we would encounter because of the `distinct/orderBy` combo.

Personally I'm not a friend of the first select returning only IDs, although there may be scenarios
when it's the best solution. Now we know we can filter list of owners by dog's attributes (that is
across *to-many* relationship), either using subqueries or distinct clause, I'd suggest returning
whole owners. We can safely join any *to-one* associations and return `Tuple` of many entities or
we can enumerate all the desired columns and return custom DTO (projection). Projection would
further relieve the persistence context if the data merely flow through the service layer to the
presentation layer.

In the second query we don't have to load the actual results anymore, the query is needed only for
fetching the data in *to-many* relationship. But we fetch all of it for all the items on the page
currently being displayed.


### *To-many* relationship fetcher

To demonstrate how we can implement this fetching pattern I decided to build "quick and dirty"
fluent API for the second query. It not only executes the fetch for the *to-many* relationship
for all the items in the page, but it also merges them into a single object -- which is a kind of
post-processing we glossed over.

I'm not saying it can't be done better but I think if it looked like this it would be really
useful:

~~~
QOwnerRaw o = QOwnerRaw.ownerRaw;
List<OwnerRaw> owners = new JPAQuery<>(em)
  .select(o)
  .from(o)
  .orderBy(o.name.asc())
  .offset(1)
  .limit(2)
  .fetch();

QDogRaw d = QDogRaw.dogRaw;
List<OwnerRaw> ownersWithDogs = ToManyFetcher.forItems(owners)
  .by(OwnerRaw::getId)
  .from(d)
  .joiningOn(d.ownerId)
  .orderBy(d.name.desc())
  .fetchAndCombine(em, OwnerRaw::setDogs);
~~~

This implies some transient dogs collection on the owner and existing setter:

~~~
@Transient
private List<DogRaw> dogs;

//...

public void setDogs(List<DogRaw> dogs) {
  this.dogs = dogs;
}
~~~

Or we can combine both in some DTO like this (first query is still the same):

~~~
// first query up to QDogRaw d = ... here 
List<OwnerWithDogs> ownersWithDogs = ToManyFetcher.forItems(owners)
  .by(OwnerRaw::getId)
  .from(d)
  .joiningOn(d.ownerId)
  .orderBy(d.name.desc())
  .fetchAs(em, OwnerWithDogs::new);

// elsewhere...
public class OwnerWithDogs {
  public final OwnerRaw owner;
  public final List<DogRaw> dogs;

  OwnerWithDogs(OwnerRaw owner, List<DogRaw> dogs) {
    this.owner = owner;
    this.dogs = dogs;
  }
}
~~~

Ok, now how to construct such an API? We can use paths of Querydsl -- although we don't use its
type-safety capabilities for perfect result -- rather we go for something useful without putting
too many parametrized type in the code. Also, in order to make it fluent with the need of adding
additional parametrized types, I broke my personal rules about code nesting -- in this case the
nesting of inner classes. Sorry for that, it's up to you to do it your way, this really is just
a proof of concept:

~~~
import com.querydsl.core.types.*;
import com.querydsl.core.types.dsl.*;
import com.querydsl.jpa.impl.JPAQuery;

import javax.persistence.EntityManager;
import java.util.*;
import java.util.function.*;
import java.util.stream.Collectors;

import static com.querydsl.core.group.GroupBy.*;

public class ToManyFetcher<T> {

  private final List<T> rows;

  private ToManyFetcher(List<T> rows) {
    this.rows = rows;
  }

  public static <T> ToManyFetcher<T> forItems(List<T> rows) {
    return new ToManyFetcher<>(rows);
  }

  public <PK> ToManyFetcherWithIdFunction<PK> by(Function<T, PK> idFunction) {
    return new ToManyFetcherWithIdFunction<>(idFunction);
  }

  public class ToManyFetcherWithIdFunction<PK> {
    private final Function<T, PK> idFunction;

    public ToManyFetcherWithIdFunction(Function<T, PK> idFunction) {
      this.idFunction = idFunction;
    }

    public <TMC> ToManyFetcherWithFrom<TMC> from(EntityPathBase<TMC> toManyEntityPathBase)
    {
      return new ToManyFetcherWithFrom<>(toManyEntityPathBase);
    }

    public class ToManyFetcherWithFrom<TMC> {
      private EntityPathBase<TMC> toManyEntityPathBase;
      private Path<PK> fkPath;
      private OrderSpecifier orderSpecifier;

      public ToManyFetcherWithFrom(EntityPathBase<TMC> toManyEntityPathBase)
      {
        this.toManyEntityPathBase = toManyEntityPathBase;
      }

      public ToManyFetcherWithFrom<TMC> joiningOn(Path<PK> fkPath) {
        this.fkPath = fkPath;
        return this;
      }

      public ToManyFetcherWithFrom<TMC> orderBy(OrderSpecifier orderSpecifier) {
        this.orderSpecifier = orderSpecifier;
        return this;
      }

      public <R> List<R> fetchAs(EntityManager em, BiFunction<T, List<TMC>, R> combineFunction) {
        Map<PK, List<TMC>> toManyResults = getToManyMap(em);

        return rows.stream()
          .map(row -> combineFunction.apply(row,
            toManyResults.getOrDefault(idFunction.apply(row), Collections.emptyList())))
          .collect(Collectors.toList());
      }

      public List<T> fetchAndCombine(EntityManager em,
        BiConsumer<T, List<TMC>> combiner)
      {
        Map<PK, List<TMC>> toManyResults = getToManyMap(em);

        rows.forEach(row -> combiner.accept(row,
          toManyResults.getOrDefault(idFunction.apply(row), Collections.emptyList())));

        return rows;
      }

      private Map<PK, List<TMC>> getToManyMap(EntityManager em) {
        List<PK> ids = rows.stream()
          .map(idFunction)
          .collect(Collectors.toList());
        JPAQuery<TMC> tmcQuery = new JPAQuery<>(em)
          .select(toManyEntityPathBase)
          .from(toManyEntityPathBase)
          .where(Expressions.booleanOperation(Ops.IN, fkPath, Expressions.constant(ids)));
        if (orderSpecifier != null) {
          tmcQuery.orderBy(orderSpecifier);
        }
        return tmcQuery
          .transform(groupBy(fkPath).as(list(toManyEntityPathBase)));
      }
    }
  }
}
~~~

First we start with `ToManyFetcher` that preserves the type for the master entity (`OwnerRaw` in
our example). I could also store `EntityManager` here -- it is eventually needed for query
execution, but I chose to put it into the terminal operation (rather arbitrary decision here).
Method `by` returns `ToManyFetcherWithIdFunction` to preserve the type of the master entity
primary key (ID) and also to store the function that maps entity to it. For that we need to return
different type. Next `from` preserves the type of `EntityPathBase` of the detail entity (that is
entity Q-class) -- and again returns instance of another type that wraps all the accumulated
knowledge.

Further `joiningOn` and `orderBy` don't add any parametrized types so they just return `this`.
While `orderBy` is optional, `joiningOn` is very important and we may construct API in a way that
enforces its call -- which did not happen in my demo. Finally we can choose from two handy `fetch`
operations depending on whether we want to combine the result on the master entity class (using
a setter for instance) or in another type (like DAO).

Java 8 is used nicely here, especially when the API is used. It can certainly be done without
streams but using inner classes instead of lambdas would `by` and `fetch` calls arguably unwieldy.
Trying to do it in a single type would require defining all the parametrized types at once --
either explicitly using `<....>` notation or using a call with multiple arguments.

I tried both and this second fluent approach is much better as the names of fluent calls introduce
the parameter and make the code virtually self-documented. I hope this demonstrates how nicely we
can use Querydsl API (and Java 8!) for recurring problems.


## Wrapping up N+1 problem

N+1 problem can occur when the load of multiple (N) entities subsequently triggers load of their
related data one by one. The relations may be *to-one* or *to-many* and there may be be multiple
of these. The worst case is when the data loaded by up to N additional queries are not used at all.
This happens often with *to-one* relationships which I personally solve with raw FK values -- as
proposed in the [chapter Removing *to-one* altogether](#ch-without-to-one). *To-many* relationships
should be declared as lazy for most cases to avoid "loading the whole DB".

Needed related data should be loaded explicitly, that is with joins, when we need the data.
Scenarios where conscious lazy load is appropriate are rather rare. Scenarios where people either
don't know or are lazy to think are less rare and that's what leads to N+1 so often. N queries
are not necessary in most cases and don't scale very well with the page size.

For data across *to-one* relationships there are rarely any negative implications when we join
them. With *to-many* situation gets a little bit messy, especially if we need data across multiple
such relationships. If we don't need pagination we may use join and then group the data
appropriately, but with pagination we have to ensure that the driving query on the master entity
is paginated correctly. With JPA/JPQL this is typically not possible in a single select and each
*to-many* relationship requires an additional query -- but it is possible to keep query count
constant and not driven by number of items.

In any case, letting lazy loading doing the job we should do in cases when the data gets loaded
anyway is sloppy. Using Open Session in View (OSIV) on top of it instead of having proper service
layer contract is plain hazardous.