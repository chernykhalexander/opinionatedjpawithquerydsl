# Advanced Querydsl {#ch-advanced-querydsl}

At the beginning of the chapter dedicated to some of the more advanced points of Querydsl I'd like
to reiterate that Querydsl has quite a [good documentation](http://www.querydsl.com/static/querydsl/4.1.3/reference/html_single/).
It's not perfect and does not cover all the possibilities of the library -- even in this chapter
we will talk about some things that are not presented there. I tried to verify these not only by
personal experience but also discussing some of them on the
[Querydsl Google Group](https://groups.google.com/forum/#!forum/querydsl). Other problems were
solved thanks to StackOverflow, often thanks to answers from the authors of the library personally.

As mentioned in the [first chapter about Querydsl](#ch-querydls) you can find the description of
a demonstration project in the appendix [Project example](#app-project-example). Virtually all
[code examples on GitHub](https://github.com/virgo47/opinionatedjpawithquerydsl/tree/master/manuscript/examples)
for this book are based on that project layout so it should be easy to replicate.


## Introducing handy utility classes

Most of the time using Querydsl we work with our generated Q-classes and `JPAQuery` class. There
are cases, however, when the fluent API is not enough and we need to add something else. This
typically happens in the `where` part and helps us putting predicates together, but there are
other cases too. Let's quickly mention the classes we should know -- our starting points for
various minor cases. Some of them will be just mentioned here, others will be discussed later in
this chapter.

* `Expressions` is probably the most useful class allowing creation of various `Expression`s. This
may represent some functions (like current date) or various `Predicate`s (which is `Expression`
subclass).
* `JPADeleteClause` and `JPAUpdateClause` (both implementing `DMLClause`) are natural complement
to our well-known `JPAQuery` when we want to modify the data.
* `BooleanBuilder` FROM JAVADOC: BooleanBuilder is a cascading builder for Predicate expressions.
BooleanBuilder is a mutable Expression implementation.
* `GroupByBuilder` FROM JAVADOC: is a fluent builder for `GroupBy` transformer instances. This class
is not to be used directly, but via `GroupBy`.
* `CaseBuilder` and its special case `CaseForEqBuilder` TODO
* `PathBuilder` and `PathBuilderFactory` TODO, from Javadoc: `PathBuilder` is an extension to
`EntityPathBase` for dynamic path construction.

Builders are to be instantiated to offer fluent API where it is not naturally available -- like
right after opening parenthesis. They don't necessarily follow builder pattern as they often
implement what they suppose to build and don't require some final *build* method call. Other
classes offer bunch of convenient static methods.


## Tricky predicate parts

Writing static queries in Querydsl is nice but Querydsl is very strong beyond that. We can use
Querydsl expressions (implementations of `com.querydsl.core.types.Expression`) to create dynamic
predicates, or to define dynamic lists of returned columns. It's easy to build your own "framework"
around these -- easy and useful, as many of the problems occur again and again.

I> `Predicate` is an interface extending from `Expression<Boolean>` and providing a single `not()`
I> operation. Anything that smells like a condition is a predicate. Predicates can be added to the
I> `where` clause where they are naturally most prominent.

In a small project we may be satisfied with distinct code for various queries. Let's say we have
three screens with lists with couple of filtering criteria. There is hardly a need to invest into
some universal framework. We simply have some base query and we just slap couple of conditions
to it like so:

~~~
if (filter.getName() != null) {
  query.where(d.name.eq(filter.getName()));
}
if (filter.getBirth() != null) {
  query.where(d.birthdate.isNull()
    .or(d.birthdate.goe(LocalDate.now())));
}
~~~

Each `where` call adds another condition into an implicit top-level `AND` group. Condition for
`birthdate` will be enclosed in parenthesis to preserve the intended meaning. You can `toString`
the query (or just its where part, or any Querydsl expression for that matter), this one will
produce this output:

{lang=sql}
~~~
select dog
from Dog dog
where dog.name = ?1 and (dog.birthdate is null or dog.birthdate >= ?2)
~~~

But what if we have a project with many list/table views with configurable columns and filtering
conditions for each column? This definitely calls for a framework of sort. We may still have
predefined query objects but predicate construction should be unified. We may even drop query
objects and have dynamic way how to add joins to a root entity. This, however, may be a
considerable endeavour even though it may be well worth the effort in the end. My experiences
in this area are quite extensive and I know that Querydsl will support you greatly.[^nextedmaybe]

[^nextedmaybe]: If I see a demand for the second edition of this book I definitely plan to
elaborate on an example of such a framework.


### Groups of AND/OR predicates

Sometimes the structure of a filter gives us multiple values. If we try to find a dog with any
of provided names we can use single `in`, but often we have to create a predicate that joins
multiple conditions with `or` or `and`. How to do that?

TODO: BooleanBuilder, and/or and other prioritized operations serialization, ...
%% TODO: when to use BooleanBuilder and when `Expressions.predicate`?


### Operator precedence and expression serialization

Let's return to the first condition from this chapter as added if both `if`s are executed. The
result was:

{lang=sql}
~~~
where dog.name = ?1 and (dog.birthdate is null or dog.birthdate >= ?2)
~~~

If we wanted to write the same condition in one go, fluently, how would we do it?

~~~
System.out.println("the same condition fluently (WRONG):\n" + dogQuery()
  .where(QDog.dog.name.eq("Rex")
    .and(QDog.dog.birthdate.isNull())
    .or(QDog.dog.birthdate.goe(LocalDate.now()))));
~~~

Previous code produces result where AND would be evaluated first on the SQL level:

{lang=sql}
~~~
where dog.name = ?1 and dog.birthdate is null or dog.birthdate >= ?2
~~~

This is easy to remedy in this case as we opened the parenthesis after `and` in the Java code
and we can nest the whole `OR` inside like this:

~~~
System.out.println("\nthe same condition fluently:\n" + dogQuery()
  .where(QDog.dog.name.eq("Rex")
    .and(QDog.dog.birthdate.isNull()
      .or(QDog.dog.birthdate.goe(LocalDate.now())))));
~~~

This gives us what we expected again with `OR` grouped together.

{lang=sql}
~~~
where dog.name = ?1 and (dog.birthdate is null or dog.birthdate >= ?2)
~~~

Now imagine we wanted to write the `OR` group first:

~~~
System.out.println("\nthe same condition, different order:\n" + dogQuery()
  .where(QDog.dog.birthdate.isNull()
    .or(QDog.dog.birthdate.goe(LocalDate.now()))
    .and(QDog.dog.name.eq("Rex"))));
~~~

This means we started our fluent predicate with an operator with a lower precedence. The result:

{lang=sql}
~~~
where (dog.birthdate is null or dog.birthdate >= ?1) and dog.name = ?2
~~~

Whow! That went well -- but you may as how? In the Java code it flows seemingly on the same level,
first `OR`, then `AND`, I don't care. With previous order you could nest `OR` inside the `AND`
on Java syntactic level, how does it work here?

The answer is actually pretty simple and also stems from Java syntax. If we add redundant
parenthesis around OR it will be absolutely clear:

~~~
.where(
  (QDog.dog.birthdate.isNull()
    .or(QDog.dog.birthdate.goe(LocalDate.now()))
  ).and(QDog.dog.name.eq("Rex"))));
~~~

Now we know what happens. As the calls are chained whatever before another call on the same level
is already grouped together as an expression. We can imagine the same parenthesis in the generated
JPQL as well, but if they are redundant they will be removed -- this is the case when `AND` goes
first, but not the case when we start with `OR`. Parenthesis were added in the JPQL in order to
preserve the evaluation order.

I> All the demonstrations were made on predicates but they work the same on any expressions using
I> any operators.

In the following code all the expressions snakes mean the same:

~~~
e1.or(e2).and(e3).or(e4)
(e1.or(e2)).and(e3).or(e4)
((e1.or(e2)).and(e3)).or(e4)
~~~

We just have to realize that the first one is not the same like SQL `e1 OR e2 AND e3 OR e4` as
`AND` has the highest precedence and is evaluated first. In Querydsl it's very easy to play with
expressions as you don't need any entities at all and you don't have to touch the database either:

~~~
BooleanTemplate e1 = Expressions.booleanTemplate("e1");
BooleanTemplate e2 = Expressions.booleanTemplate("e2");
BooleanTemplate e3 = Expressions.booleanTemplate("e3");
BooleanTemplate e4 = Expressions.booleanTemplate("e4");
System.out.println("\ne1.or(e2).and(e3).or(e4) = " +
  e1.or(e2).and(e3).or(e4));
System.out.println("\ne1.or(e2).and(e3).or(e4) = " + new JPAQuery<>()
  .where(e1.or(e2).and(e3).or(e4)));
~~~

This produces:

{lang=text}
~~~
e1.or(e2).and(e3).or(e4) = (e1 || e2) && e3 || e4

e1.or(e2).and(e3).or(e4) = where (e1 or e2) and e3 or e4
~~~

The first line is not much SQL like but if we create just an empty query with where we will get
nice SQL-like result (although the whole query is obviously invalid). We see that the first `OR`
group is enclosed in parenthesis, just as we saw it in one of the examples before.

Finally, let's try something even more complicated - let's say we need:

~~~
((e1 OR e2) AND (e3 OR e4)) OR (e5 AND e6)
~~~

For that we write this in Java:

~~~
.where(e1.or(e2).and(e3.or(e4)).or(e5.and(e6))))
~~~

Let's check the output:

~~~
(e1 or e2) and (e3 or e4) or e5 and e6
~~~

Yup, it's the one, unnecessary parenthesis around the first `AND` are omitted but it will work.

D> Now, I apologize if I insulted your intelligence in this section, but these questions
D> crop up quite often around Querydsl. If we think it through it is clear how the expressions
D> written in Java form a logical tree and how they are serialized afterwords -- but with SQL
D> (or JPQL) colliding with Java (and fluent syntax) it definitely is not natural.
D>
D> This material is based on [this StackOverflow question](http://stackoverflow.com/q/10549477/658826)
D> and Timo's [following Gist](https://gist.github.com/timowest/5098112). 


## Constants

TODO: `Expressions.constant`


## Using FUNCTION template {#qdsl-function-template}

TODO


## Update/delete clauses and exception handling

Instead of:

~~~
// delete by holidays by calendar ID
new JPADeleteClause(entityManager, $)
  .where($.calendarId.eq(calendar.getId()))
  .execute();
~~~

We use:

~~~
execute(deleteFrom($)
  .where($.calendarId.eq(calendar.getId())));

// with these methods in common `BaseDao`
public final JPADeleteClause deleteFrom(EntityPath<?> path) {
  return new JPADeleteClause(entityManager, path);
}

protected long execute(DMLClause dmlClause) {
  try {
    return dmlClause.execute();
  } catch (PersistenceException e) {
    throw convertPersistenceException(e);
  }
}
~~~


## `JPAQueryFactory`

From reference documentation:

Q> For the examples of this chapter the queries are created via a JPAQueryFactory instance.
Q> JPAQueryFactory should be the preferred option to obtain JPAQuery instances.

TODO: mention `selectFrom` and other convenient methods
`JPAQueryFactory` can be created once in cases where `EntityManager` is injected (typically it
works as a thread-safe proxy to the actual entity manager). If we obtain `EntityManager`
programmatically we can still use it but it is short-lived and the benefit is questionable.


## Detached queries {#querydsl-detached-queries}

Typically we create the `JPAQuery` with `EntityManager` parameter, but sometimes it feels more
natural to put queries into a constant a reuse them later -- something resembling named queries
facility of JPA. This is possible using so called "detached queries" -- simply create a query
without entity manager and later clone it with entity manager provided:

{title="Querydsl, detached query", lang=java}
~~~
private static QDog DOG_ALIAS = new QDog("d1");
private static Param<String> DOG_NAME_PREFIX =
  new Param<String>(String.class);
private static JPAQuery<Dog> DOG_QUERY = new JPAQuery<Dog>()
  .select(DOG_ALIAS)
  .from(DOG_ALIAS)
  .where(DOG_ALIAS.name.startsWith(DOG_NAME_PREFIX));

//... and somewhere in a method
List<Dog> dogs = DOG_QUERY.clone(em)
  .set(DOG_NAME_PREFIX, "Re")
  .fetch();
~~~

The benefit is questionable though. You need to name the query well enough so it expresses what
it does while seeing the query sometimes says it better. You have to walk the distance to introduce
parameters explicitly -- you don't want it constant. And I doubt there is any performance benefit
as we clone the query. I'm sure there are legitimate cases when to use
this feature, but I personally use it only in query objects wrapping complicated query where I have
a lot of aliases around already -- and even then mostly without the where part which I rather add
dynamically later.

%% TODO: revisit clone and other methods in multi-threaded environments, see the answer:
%% https://groups.google.com/forum/#!topic/querydsl/OnrWCf6w2V0
%% detached queries also mean we can't use factory
%% in overall I'd try to avoid it again


## Working with dates and `java.time` API

TODO

This is how to convert return of the `DateTimeExpression` function to specific date/time type:

~~~
Tuple notificationWithState = queryFrom($)
  .innerJoin(n).on(n.id.eq($.notificationId))
  .where($.mailStatus.eq(GuiUserNotificationSendStatus.TO_SEND)
    .and(n.validFrom.lt(DateTimeExpression.currentTimestamp(LocalDateTime.class))))
  .orderBy($.id.desc())
  .singleResult($, n);
~~~

How to coerce with `java.util` types? How to mix `LocalDate` and `LocalDateTime`?


## Query object

TODO: aliases as fields, mention metadata possibilities, alias thread-safety
TODO: check if PathBuilder is better in getting fields than reflection on Qclass


## Result transformation {#querydsl-transformations}

Example sources ResultTransformation.java
TODO: ResultTransformer and GroupBy; how does QMap relate? (it goes into select part)

Method `groupBy` is statically imported from provided `GroupBy` class. You can return list of
multiple results in `as` part, or you can use aggregation functions like `sum`, `avg`, etc.
You may notice that you don't need `select` as the arguments of `transform` fully replace it.

Transform does not affect generated query, it only post-process its results.

I> If you want to aggregate some columns you still need to use `groupBy(Expression...)` as
I> explained in the section about [aggregate functions](#querydsl-aggregation).
I> Aggregating the results and transforming them are two separate things.


## Note about Querydsl 3 versus 4 {#querydsl3vs4}

I've used major versions 2 and 3 in my projects and started to use version 4 only when I started
to write this book. After initial investigation I realized that I'll hardly switch from version 3
to version 4 in any reasonably sized project easily. Other thing is whether I even want. I don't
want to let version 4 down, it does a lot to get the DSL closer to SQL semantics -- but that's
the question: Is it really necessary?

Let's compare a query from version 4 with the same query from version 3 -- let's start with 4:

{title="Querydsl version 4 query", lang=java}
~~~
List<Dog> dogs = new JPAQuery<Dog>(em)
  .select(QDog.dog)
  .from(QDog.dog)
  .where(QDog.dog.name.like("Re%"))
  .fetch();
~~~

Next example shows the same in Querydsl version 3:

{title="Querydsl version 3 query", lang=java}
~~~
List<Dog> dogs = new JPAQuery(em)
  .from(QDog.dog)
  .where(QDog.dog.name.like("Re%"))
  .list(QDog.dog);
~~~

Personally I like the latter more even though the first one is more SQL-like notation. Version 3
is one line shorter -- that purely technical `fetch()` call is pure noise. Further that `fetch()`
was used in version 3 to declare fetching of the joined entity, in version 4 you have to use
`fetchAll()` for that. This means that `fetch*()` methods are not part of one family -- that's
far from ideal from API/DSL point of view.


### Convenient `map` is gone

In Querydsl 3 you could also use handy `map(key, value)` method instead of `list` -- and it
returned `Map` exactly as you'd expect:

{title="Querydsl version 3 query returning map", lang=java}
~~~
Map<Integer, Dog> dogsById = new JPAQuery(em)
  .from(QDog.dog)
  .map(QDog.dog.id, QDog.dog);
~~~

In Querydsl 4 you are left with something more abstract, more elusive and definitely more talkative:

{title="Querydsl version 4 query returning map", lang=java}
~~~
Map<Integer, Dog> breedsById = new JPAQuery<>(em)
  .from(QDog.dog)
  .transform(groupBy(QDog.dog.id).as(QDog.dog));
~~~

Solution with `transform` is available in Querydsl 3 as well and covers also cases `map` does not
(see previous section on [result transformation](#querydsl-transformations)). You don't need
`select` here because `transform` specifies what to return and you don't need `fetch` either
as it works as a terminal operation -- just like `list` in version 3. So in order to get a list
you have to use different flow of the fluent API than for a map.


### Placement of `select`

TODO: Rewrite the next para. The problem is that from without select still gives you JPAQuery<?>.
But it is possible to put select at the end. It is NOT necessary to parametrize the constructor,
diamond is sufficient.

Another thing is that version 3 API was actually really fluent. I didn't have to parametrize
`JPAQuery` constructor -- in version 4 you have to otherwise `where(...)` does not return anything
you can call `fetch()` on. In version 3 you went on and on, maybe there was a bit less compile-time
safety, but I never encountered this as a real problem. Version 3 worked perfectly with IDE,
version 4 is rather annoying with that parametrized constructor without giving me, the programmer,
any additional benefit. (I don't claim to know all about these API/DSL changes, though.)

As the fluency goes most programmers in our team agreed to prefer finish with the
`list(expressions...)` call as the last call clearly says what gets returned. With SQL-like
approach you do this first, then add various `JOIN`s -- but this all fights typical Java-like
programming mindset. For me personally version 3 hit the sweet spot perfectly, not fighting
Java syntax (I feel a bit of a struggle between Querydsl 4 and Java) and giving me very
SQL-like style of queries.

We can also question what changes more. Sometimes we change the list of expressions, which means
we have to construct the whole query again and the most moving part -- the list of resulting
expressions -- go somewhere in the middle (actually right at the start!). I cannot have my query
template with `FROM` and `JOIN`s ready anymore. All I had to do before was to clone it (so we don't
change the template), add where parts based on some filter and declare what expressions we want
as results, based on well-known available aliases, columns, etc.

TODO: we actually can move select to the end and finish with select(...).fetch()

Sure you have to have those aliases thought through before anyway, so it's not such a big deal to
create all the queries dynamically and add `JOIN`s after you "use them" in the `SELECT` part,
because the aliases are the common ground and probably available as some constants. But there is
another good scenario for pre-created template query -- you can use it as... well, we said it
already, as a template. This way you can ask its metadata and do some preparation based on this.
We use this for our filter framework where the guys from UI know exactly what kind of aliases we
offer, because we crate a `Map<String, SimpleExpression<?>>` to get to the paths representing the
alias by its name very quickly. We can still do this with Querydsl 4. We create one query selecting
the entity used in the `FROM` clause (makes sense) and extract the map of aliases on this one,
discarding this "probe query" afterwards. Not a big deal, but still supports the idea that after
the `WHERE` clause it is the `SELECT` part that is most flexible and using it right at the start
of the "sentence" may sound natural, but not programmatically right.

D> The same applies for SQL itself. In its time it was probably great, but imagine nowadays IDEs
D> that can help you with the `SELECT` part of the query. What will you do? You'll write `SELECT *`
D> and finish the rest (froms, joins, wheres) and return to that `*` expecting that IDE will give
D> you hints based on actual tables/aliases used. This "backward-ish" flow opens space for that
D> question: Is the original order of clauses really the best one? I believe Querydsl 3 was ahead
D> and shouldn't have gone back to SQL style.

### Subqueries

In Querydsl 3 we used `JPASubQuery` for subqueries -- in Querydsl 4 we use ordinary `JPAQuery`,
we just don't provide it with entity manager and we don't use terminal operations like `fetch`
that would trigger it immediately. This change is not substantial from developer's perspective,
either of this works without problems.